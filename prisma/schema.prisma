generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  nickName    String        @unique
  password    String
  posts       Post[]
  comments    Comment[]
  likePosts   LikePost[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  GroupMember GroupMember[]
}

model Group {
  id          Int             @id @default(autoincrement())
  name        String
  posts       Post[]
  missions    Mission[]
  members     GroupMember[]
  cateogories GroupCategory[]
}

model GroupMember {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  group     Group   @relation(fields: [groupId], references: [id])
  groupId   Int
  isCreator Boolean @default(false)

  @@id([userId, groupId])
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String
  groups GroupCategory[]
}

model GroupCategory {
  group      Group    @relation(fields: [groupId], references: [id])
  groupId    Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([groupId, categoryId])
}

model Post {
  id          Int        @id @default(autoincrement())
  contents    String
  writer      User       @relation(fields: [writerId], references: [id])
  writerId    Int
  group       Group      @relation(fields: [groupId], references: [id])
  groupId     Int
  isPublished Boolean    @default(false)
  isPinned    Boolean    @default(false)
  comments    Comment[]
  likePosts   LikePost[]
  images      Image[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
}

model Comment {
  id        Int      @id @default(autoincrement())
  contents  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  replyTo   Int?
  order     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LikePost {
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@id([postId, userId])
}

model Mission {
  id        Int      @id @default(autoincrement())
  mission   String
  type      String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  createdAt DateTime @default(now())
}

model Image {
  id        Int       @id @default(autoincrement())
  post      Post?     @relation(fields: [postId], references: [id])
  postId    Int?
  mimeType  String
  path      String
  order     Int       @default(1)
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}
